name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get specific commits of git submodules
        run: sh -ex ./submod.sh

      - name: Install toolchains
        run: |
          set -ex
          wget -q https://developer.arm.com/-/media/Files/downloads/gnu-a/10.3-2021.07/binrel/gcc-arm-10.3-2021.07-x86_64-aarch64-none-elf.tar.xz
          tar xf gcc-arm-10.3-2021.07-x86_64-aarch64-none-elf.tar.xz
          wget -q https://developer.arm.com/-/media/Files/downloads/gnu-a/10.3-2021.07/binrel/gcc-arm-10.3-2021.07-x86_64-arm-none-eabi.tar.xz
          tar xf gcc-arm-10.3-2021.07-x86_64-arm-none-eabi.tar.xz
          mkdir -p kernels

      - name: Build for Raspberry Pi 5
        run: |
          set -ex
          export PATH=$(readlink -f ./gcc-arm-10.3-2021.07-x86_64-aarch64-none-elf/bin):$PATH
          RPI=5 bash -ex build.sh
          cp ./src/kernel*.img ./kernels/ || true

      - name: Build for Raspberry Pi 4
        run: |
          set -ex
          export PATH=$(readlink -f ./gcc-arm-10.3-2021.07-x86_64-aarch64-none-elf/bin):$PATH
          RPI=4 bash -ex build.sh
          cp ./src/kernel*.img ./kernels/ || true

      - name: Build for Raspberry Pi 3
        run: |
          set -ex
          export PATH=$(readlink -f ./gcc-arm-10.3-2021.07-x86_64-aarch64-none-elf/bin):$PATH
          RPI=3 bash -ex build.sh
          cp ./src/kernel*.img ./kernels/ || true

      # Uncomment and adjust these if you want to build for Pi 2/1 and have the correct toolchain
      # - name: Build for Raspberry Pi 2
      #   run: |
      #     set -ex
      #     export PATH=$(readlink -f ./gcc-arm-10.3-2021.07-x86_64-arm-none-eabi/bin):$PATH
      #     RPI=2 bash -ex build.sh
      #     cp ./src/kernel*.img ./kernels/ || true

      # - name: Build for Raspberry Pi 1
      #   run: |
      #     set -ex
      #     export PATH=$(readlink -f ./gcc-arm-10.3-2021.07-x86_64-arm-none-eabi/bin):$PATH
      #     RPI=1 bash -ex build.sh
      #     cp ./src/kernel*.img ./kernels/ || true

      - name: Get Raspberry Pi boot files
        run: |
          set -ex
          export PATH=$(readlink -f ./gcc-arm-10.3-2021.07-x86_64-aarch64-none-elf/bin):$PATH
          cd ./circle-stdlib/libs/circle/boot
          make
          make armstub64
          cd -
          mkdir -p sdcard
          cp -r ./circle-stdlib/libs/circle/boot/* sdcard
          rm -rf sdcard/config*.txt sdcard/README sdcard/Makefile sdcard/armstub sdcard/COPYING.linux
          cp ./src/config.txt ./src/minijv880.ini ./src/*img sdcard/ || true
          echo "usbspeed=full" > sdcard/cmdline.txt
          cp ./kernels/* sdcard/ || true

      - name: Generate zip file
        run: |
          cd sdcard
          zip -r ../MiniJV880_${{ github.run_number }}_$(date +%Y-%m-%d)-$(git rev-parse --short HEAD).zip *
          echo "artifactName=MiniJV880_${{ github.run_number }}_$(date +%Y-%m-%d)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          cd -

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifactName }}
          path: ./sdcard/*

      - name: Upload to GitHub Releases (only when building from main branch)
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          set -ex
          wget -c https://github.com/probonopd/uploadtool/raw/master/upload.sh
          bash ./upload.sh ./MiniJV880*.zip
